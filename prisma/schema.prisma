generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  username         String           @unique
  email            String           @unique
  name             String
  password         String
  createdAt        DateTime         @default(now())
  emailCode        String?
  emailVerified    Boolean          @default(false)
  profilePicture   String?
  websites         Website[]
  verifiedDevices  VerifiedDevice[]
  stripeCustomerId String?          @unique
}

model Website {
  id                       String                     @id @default(uuid())
  url                      String // The allowed website URL
  name                     String? // Optional name for the website
  userId                   String
  type                     String // The type of website (e.g., "shopify", "wordpress", "other")
  createdAt                DateTime                   @default(now())
  renewsOn                 DateTime? // Monthly subscription renewal date
  plan                     String // Subscription plan type
  stripeId                 String?                    @unique // Stripe subscription ID
  active                   Boolean                    @default(false)
  syncFrequency            String                     @default("daily") // daily, weekly, monthly
  lastSyncedAt             DateTime?
  monthlyQueries           Int                        @default(0)
  accessKeys               AccessKey[]
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  queryLimit               Int                        @default(10000)
  posts                    WordpressPost[]
  pages                    WordpressPage[]
  products                 WordpressProduct[]
  shopifyStoreId           String?                    @unique
  shopifyPages             ShopifyPage[]
  shopifyBlog              ShopifyBlog[]
  shopifyProducts          ShopifyProduct[]
  aiAssistantId            String? // OpenAI Assistant ID
  aiThreads                AiThread[]
  WordpressCategory        WordpressCategory[]
  WordpressMedia           WordpressMedia[]
  WordpressAuthor          WordpressAuthor[]
  WordpressProductCategory WordpressProductCategory[]
  WordpressProductTag      WordpressProductTag[]
  WordpressCustomField     WordpressCustomField[]
  WordpressTag             WordpressTag[]
  VectorDbConfig           VectorDbConfig?

  @@index([userId])
}

model AccessKey {
  id        String   @id @default(uuid())
  name      String?
  key       String   @unique
  websiteId String
  createdAt DateTime @default(now())
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
}

model VerifiedDevice {
  id        String   @id @default(cuid())
  deviceId  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WordpressPost {
  id           Int                    @id @default(autoincrement())
  wpId         Int                    @unique // WordPress Post ID
  title        String
  content      String                 @db.Text
  excerpt      String?                @db.Text
  slug         String
  link         String
  authorId     Int?
  author       WordpressAuthor?       @relation(fields: [authorId], references: [wpId])
  categories   WordpressCategory[]
  tags         WordpressTag[]
  comments     WordpressComment[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  customFields WordpressCustomField[]
  website      Website                @relation(fields: [websiteId], references: [id])
  websiteId    String

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressPage {
  id        Int      @id @default(autoincrement())
  wpId      Int      @unique // WordPress Page ID
  title     String
  content   String   @db.Text
  slug      String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  website   Website  @relation(fields: [websiteId], references: [id])
  websiteId String

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressProduct {
  id               Int                        @id @default(autoincrement())
  wpId             Int                        @unique // WooCommerce Product ID
  name             String
  slug             String
  permalink        String
  description      String                     @db.Text
  shortDescription String?                    @db.Text
  price            Float
  regularPrice     Float?
  salePrice        Float?
  stockQuantity    Int?
  categories       WordpressProductCategory[]
  tags             WordpressProductTag[]
  reviews          WordpressReview[]
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  customFields     WordpressCustomField[]
  website          Website                    @relation(fields: [websiteId], references: [id])
  websiteId        String

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressMedia {
  id          Int      @id @default(autoincrement())
  wpId        Int      @unique // WordPress Media ID
  title       String?
  url         String
  alt         String?
  description String?  @db.Text
  caption     String?
  mimeType    String?
  metadata    Json?
  createdAt   DateTime
  updatedAt   DateTime
  website     Website  @relation(fields: [websiteId], references: [id])
  websiteId   String

  @@index([websiteId])
}

model WordpressAuthor {
  id        Int             @id @default(autoincrement())
  wpId      Int             @unique // WordPress Author ID
  name      String
  email     String?
  url       String?
  bio       String?         @db.Text
  avatarUrl String?
  posts     WordpressPost[]
  createdAt DateTime
  updatedAt DateTime
  website   Website         @relation(fields: [websiteId], references: [id])
  websiteId String

  @@index([websiteId])
}

model WordpressCategory {
  id          Int             @id @default(autoincrement())
  wpId        Int             @unique // WordPress Category ID
  name        String
  slug        String
  description String?         @db.Text
  posts       WordpressPost[]
  website     Website         @relation(fields: [websiteId], references: [id])
  websiteId   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressTag {
  id        Int             @id @default(autoincrement())
  wpId      Int             @unique // WordPress Tag ID
  name      String
  slug      String
  posts     WordpressPost[]
  website   Website         @relation(fields: [websiteId], references: [id])
  websiteId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressProductCategory {
  id          Int                @id @default(autoincrement())
  wpId        Int                @unique // WooCommerce Category ID
  name        String
  slug        String
  description String?            @db.Text
  parent      Int?
  count       Int?
  imageUrl    String?
  products    WordpressProduct[]
  website     Website            @relation(fields: [websiteId], references: [id])
  websiteId   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressProductTag {
  id          Int                @id @default(autoincrement())
  wpId        Int                @unique // WooCommerce Tag ID
  name        String
  slug        String
  description String?            @db.Text
  count       Int                @default(0)
  products    WordpressProduct[]
  website     Website            @relation(fields: [websiteId], references: [id])
  websiteId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, websiteId])
  @@index([websiteId])
}

model WordpressComment {
  id          Int                @id @default(autoincrement())
  wpId        Int                @unique // WordPress Comment ID
  authorName  String
  authorEmail String
  content     String             @db.Text
  date        DateTime
  status      String             @default("approved") // approved, pending, spam
  parentId    Int? // Parent comment for threading
  postId      Int
  post        WordpressPost      @relation(fields: [postId], references: [wpId])
  parent      WordpressComment?  @relation("CommentToComment", fields: [parentId], references: [wpId])
  children    WordpressComment[] @relation("CommentToComment")
}

model WordpressReview {
  id            Int              @id @default(autoincrement())
  wpId          Int              @unique // WooCommerce Review ID
  reviewer      String
  reviewerEmail String
  review        String           @db.Text
  rating        Int
  date          DateTime
  verified      Boolean
  productId     Int
  product       WordpressProduct @relation(fields: [productId], references: [wpId])
}

model WordpressCustomField {
  id                 Int               @id @default(autoincrement())
  postId             Int?
  metaKey            String
  metaValue          String            @db.Text
  postType           String
  post               WordpressPost?    @relation(fields: [postId], references: [wpId])
  website            Website           @relation(fields: [websiteId], references: [id])
  websiteId          String
  WordpressProduct   WordpressProduct? @relation(fields: [wordpressProductId], references: [id])
  wordpressProductId Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@unique([postId, metaKey])
  @@index([websiteId])
}

model ShopifyStore {
  id        String   @id @default(uuid())
  shopId    Int      @unique // Shopify Store ID
  name      String
  email     String
  domain    String
  currency  String
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  websiteId String?
}

model ShopifyProduct {
  id          String                  @id @default(uuid())
  shopifyId   Int                     @unique // Shopify Product ID
  title       String
  handle      String                  @unique
  vendor      String
  productType String
  description String                  @db.Text
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  images      ShopifyMedia[]
  variants    ShopifyProductVariant[]
  reviews     ShopifyReview[]
  website     Website?                @relation(fields: [websiteId], references: [id])
  websiteId   String?
}

model ShopifyProductVariant {
  id        String         @id @default(uuid())
  shopifyId Int            @unique // Shopify Variant ID
  title     String
  price     Float
  sku       String?
  inventory Int?
  productId String
  product   ShopifyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ShopifyMedia {
  id        String          @id @default(uuid())
  shopifyId Int             @unique // Shopify Media ID
  url       String
  altText   String?
  caption   String?
  productId String?
  product   ShopifyProduct? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ShopifyReview {
  id        String         @id @default(uuid())
  shopifyId Int            @unique // Shopify Review ID (from external app like Judge.me)
  rating    Int
  title     String
  body      String         @db.Text
  reviewer  String
  verified  Boolean
  createdAt DateTime       @default(now())
  productId String
  product   ShopifyProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ShopifyDiscount {
  id         String    @id @default(uuid())
  shopifyId  Int       @unique // Shopify Discount ID
  title      String
  valueType  String // "percentage" or "fixed_amount"
  value      Float
  targetType String // "line_item" or "shipping_line"
  startsAt   DateTime
  endsAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ShopifyGiftCard {
  id        String    @id @default(uuid())
  shopifyId Int       @unique // Shopify Gift Card ID
  code      String    @unique
  balance   Float
  currency  String
  expiresOn DateTime?
  createdAt DateTime  @default(now())
}

model ShopifyPage {
  id        String   @id @default(uuid())
  shopifyId Int      @unique // Shopify Page ID
  title     String
  handle    String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  website   Website? @relation(fields: [websiteId], references: [id])
  websiteId String?
}

model ShopifyBlog {
  id        String            @id @default(uuid())
  shopifyId Int               @unique // Shopify Blog ID
  title     String
  handle    String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  posts     ShopifyBlogPost[]
  website   Website?          @relation(fields: [websiteId], references: [id])
  websiteId String?
}

model ShopifyBlogPost {
  id        String           @id @default(uuid())
  shopifyId Int              @unique // Shopify Blog Post ID
  title     String
  handle    String           @unique
  content   String           @db.Text
  author    String
  image     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  blogId    String
  blog      ShopifyBlog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comments  ShopifyComment[]
}

model ShopifyComment {
  id        String          @id @default(uuid())
  shopifyId Int             @unique // Shopify Comment ID
  body      String          @db.Text
  author    String
  email     String?
  status    String // "approved", "pending", "spam"
  createdAt DateTime        @default(now())
  postId    String
  post      ShopifyBlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model AiThread {
  id            String      @id @default(uuid())
  threadId      String // OpenAI Thread ID
  websiteId     String
  website       Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  title         String? // Optional thread title
  createdAt     DateTime    @default(now())
  lastMessageAt DateTime    @default(now())
  messages      AiMessage[]

  @@index([websiteId])
}

model AiMessage {
  id           String   @id @default(uuid())
  threadId     String
  thread       AiThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  role         String // 'assistant' or 'user'
  content      String   @db.Text
  pageUrl      String? // URL to redirect to (if provided by AI)
  scrollToText String? // Text to scroll to on page (if provided by AI)
  createdAt    DateTime @default(now())

  @@index([threadId])
}

model VectorDbConfig {
  id        String  @id @default(uuid())
  namespace String // The namespace used to partition data (same as websiteId)
  website   Website @relation(fields: [websiteId], references: [id])
  websiteId String  @unique
}
